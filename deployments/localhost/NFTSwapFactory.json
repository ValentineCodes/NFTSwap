{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NFTSwapFactory__NotFeeSetter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTSwapFactory__PoolAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NFTSwapFactory__ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nftB",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeReceiverSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nft0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "nft1",
          "type": "address"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeReceiver",
          "type": "address"
        }
      ],
      "name": "setFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeReceiverSetter",
          "type": "address"
        }
      ],
      "name": "setFeeReceiverSetter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf788bdb292599dde4a96c18677bd62dab43705576424acbb4ca3365e9e58f018",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "2657265",
    "logsBloom": "0x
    "blockHash": "0x220194a33354af5862981e3e0c3c324c063c5e6980a240d6f5027365cb2db127",
    "transactionHash": "0xf788bdb292599dde4a96c18677bd62dab43705576424acbb4ca3365e9e58f018",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "2657265",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "468debca680dcf0378d34d4659add940",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NFTSwapFactory__NotFeeSetter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTSwapFactory__PoolAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NFTSwapFactory__ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftB\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeReceiverSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nft0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nft1\",\"type\":\"address\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiverSetter\",\"type\":\"address\"}],\"name\":\"setFeeReceiverSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getAllPools()\":{\"returns\":{\"_0\":\"Array of pool address\"}},\"getFeeReceiver()\":{\"details\":\"Can be changed by the current fee setter via setFeeReceiver()\",\"returns\":{\"_0\":\"The current fee receiver\"}},\"getFeeReceiverSetter()\":{\"details\":\"Can be changed by the current fee setter via setFeeReceiverSetter()\",\"returns\":{\"_0\":\"The current fee receiver setter\"}},\"setFeeReceiver(address)\":{\"details\":\"Can only be called by the current fee receiver setter\",\"params\":{\"feeReceiver\":\"The address of the new fee receiver\"}},\"setFeeReceiverSetter(address)\":{\"details\":\"Can only be called by the current fee receiver setter\",\"params\":{\"feeReceiverSetter\":\"The address of the new fee receiver setter\"}}},\"version\":1},\"userdoc\":{\"events\":{\"PoolCreated(address,address,address)\":{\"notice\":\"Emitted when a pool is created\"}},\"kind\":\"user\",\"methods\":{\"getAllPools()\":{\"notice\":\"Returns all pool addresses\"},\"getFeeReceiver()\":{\"notice\":\"Returns the current fee receiver\"},\"getFeeReceiverSetter()\":{\"notice\":\"Returns the current fee receiver setter\"},\"setFeeReceiver(address)\":{\"notice\":\"Updates fee receiver\"},\"setFeeReceiverSetter(address)\":{\"notice\":\"Updates fee receiver setter\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTSwapFactory.sol\":\"NFTSwapFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/NFTSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./interfaces/INFTSwapFactory.sol\\\";\\nimport \\\"./interfaces/INFTSwapPool.sol\\\";\\nimport \\\"./NFTSwapPool.sol\\\";\\nimport \\\"./NoDelegateCall.sol\\\";\\n\\nerror NFTSwapFactory__NotFeeSetter();\\n\\nerror NFTSwapFactory__ZeroAddress();\\n\\nerror NFTSwapFactory__PoolAlreadyExists();\\n\\ncontract NFTSwapFactory is INFTSwapFactory, NoDelegateCall {\\n    address private s_feeReceiver;\\n\\n    address private s_feeReceiverSetter;\\n\\n    address[] private s_allPools;\\n\\n    mapping(address => mapping(address => address)) private s_pool;\\n\\n    constructor() {\\n        s_feeReceiver = msg.sender;\\n        s_feeReceiverSetter = msg.sender;\\n    }\\n\\n    modifier onlyFeeReceiverSetter() {\\n        if (msg.sender != s_feeReceiverSetter)\\n            revert NFTSwapFactory__NotFeeSetter();\\n        _;\\n    }\\n\\n    function getFeeReceiver() external view override returns (address) {\\n        return s_feeReceiver;\\n    }\\n\\n    function getFeeReceiverSetter() external view override returns (address) {\\n        return s_feeReceiverSetter;\\n    }\\n\\n    function getAllPools() external view override returns (address[] memory) {\\n        return s_allPools;\\n    }\\n\\n    function getPool(address nft0, address nft1)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return s_pool[nft0][nft1];\\n    }\\n\\n    function _sortNFTs(address nftA, address nftB)\\n        internal\\n        pure\\n        returns (address nft0, address nft1)\\n    {\\n        (nft0, nft1) = nftA < nftB ? (nftA, nftB) : (nftB, nftA);\\n    }\\n\\n    function createPool(address nftA, address nftB)\\n        external\\n        override\\n        noDelegateCall\\n        returns (address pool)\\n    {\\n        (address nft0, address nft1) = _sortNFTs(nftA, nftB);\\n\\n        if (nft0 == address(0)) revert NFTSwapFactory__ZeroAddress();\\n        if (s_pool[nft0][nft1] != address(0))\\n            revert NFTSwapFactory__PoolAlreadyExists();\\n\\n        // deploy pool contract\\n        pool = address(\\n            new NFTSwapPool{\\n                salt: keccak256(abi.encode(address(this), nft0, nft1))\\n            }(address(this), nft0, nft1)\\n        );\\n\\n        s_allPools.push(pool);\\n        s_pool[nft0][nft1] = pool;\\n\\n        if (nft0 != nft1) {\\n            s_pool[nft1][nft0] = pool;\\n        }\\n\\n        emit PoolCreated(nft0, nft1, pool);\\n\\n        return pool;\\n    }\\n\\n    function setFeeReceiver(address feeReceiver)\\n        external\\n        override\\n        onlyFeeReceiverSetter\\n    {\\n        s_feeReceiver = feeReceiver;\\n    }\\n\\n    function setFeeReceiverSetter(address feeReceiverSetter)\\n        external\\n        override\\n        onlyFeeReceiverSetter\\n    {\\n        s_feeReceiverSetter = feeReceiverSetter;\\n    }\\n}\\n\",\"keccak256\":\"0xb101526cb9ddf6cf92840b808396c21e58a2cf378ef0c0b3640a2f32294f1466\",\"license\":\"MIT\"},\"contracts/NFTSwapPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\n// import \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nimport \\\"./interfaces/INFTSwapPool.sol\\\";\\nimport \\\"./interfaces/INFTSwapFactory.sol\\\";\\n\\n// import \\\"./libraries/PriceConverter.sol\\\";\\n\\nerror NFTSwapPool__ZeroAddress();\\n\\nerror NFTSwapPool__TokenPairNotFound();\\n\\nerror NFTSwapPool__ExchangeExists();\\n\\nerror NFTSwapPool__NonexistentExchange();\\n\\nerror NFTSwapPool__NotOwner();\\n\\nerror NFTSwapPool__AlreadyOwnedToken();\\n\\nerror NFTSwapPool__TransferFromFailed();\\n\\nerror NFTSwapPool__InvalidTrader();\\n\\nerror NFTSwapPool__InvalidTo();\\n\\nerror NFTSwapPool__PriceOutOfRange();\\n\\nerror NFTSwapPool__InvalidTokenReceiver();\\n\\nerror NFTSwapPool__InsufficientFee();\\n\\nerror NFTSwapFactory__FeeTransferFailed();\\n\\ncontract NFTSwapPool is INFTSwapPool {\\n    // using PriceConverter for uint256;\\n\\n    uint256 private constant MINIMUM_FEE = 1 * 10**18; // in USD\\n\\n    address private immutable i_nft0;\\n    address private immutable i_nft1;\\n\\n    INFTSwapFactory private immutable s_factory;\\n    // AggregatorV3Interface private immutable s_priceFeed;\\n\\n    TokenIdPair[] private s_allPairs;\\n\\n    mapping(uint256 => mapping(uint256 => Exchange)) private s_exchange;\\n\\n    constructor(\\n        address factory,\\n        address nft0,\\n        address nft1\\n    ) {\\n        s_factory = INFTSwapFactory(factory);\\n        i_nft0 = nft0;\\n        i_nft1 = nft1;\\n        // s_priceFeed = AggregatorV3Interface(priceFeed);\\n    }\\n\\n    function getNFTPair() external view override returns (address, address) {\\n        return (i_nft0, i_nft1);\\n    }\\n\\n    function getAllPairs()\\n        external\\n        view\\n        override\\n        returns (TokenIdPair[] memory)\\n    {\\n        return s_allPairs;\\n    }\\n\\n    function getExchange(uint256 tokenId0, uint256 tokenId1)\\n        external\\n        view\\n        override\\n        returns (Exchange memory)\\n    {\\n        return s_exchange[tokenId0][tokenId1];\\n    }\\n\\n    function _getOwnerOf(address nft, uint256 tokenId)\\n        private\\n        view\\n        returns (address)\\n    {\\n        return IERC721(nft).ownerOf(tokenId);\\n    }\\n\\n    function _createExchange(\\n        address trader,\\n        uint256 tokenId0,\\n        uint256 tokenId1\\n    ) private {\\n        Exchange memory exchange = s_exchange[tokenId0][tokenId1];\\n        (address nft0, address nft1) = (i_nft0, i_nft1);\\n\\n        if (exchange.owner != address(0)) revert NFTSwapPool__ExchangeExists();\\n        if (trader == msg.sender || trader == nft0 || trader == nft1)\\n            revert NFTSwapPool__InvalidTrader();\\n        if (_getOwnerOf(nft1, tokenId1) == msg.sender)\\n            revert NFTSwapPool__AlreadyOwnedToken();\\n\\n        IERC721(nft0).safeTransferFrom(msg.sender, address(this), tokenId0, \\\"\\\");\\n\\n        s_allPairs.push(TokenIdPair(tokenId0, tokenId1));\\n        s_exchange[tokenId0][tokenId1] = Exchange(\\n            msg.sender,\\n            trader,\\n            tokenId0,\\n            tokenId1\\n        );\\n\\n        // (bool success, ) = payable(s_factory.getFeeReceiver()).call{\\n        //     value: msg.value\\n        // }(\\\"\\\");\\n\\n        // if (!success) revert NFTSwapFactory__FeeTransferFailed();\\n\\n        emit ExchangeCreated(\\n            nft0,\\n            nft1,\\n            msg.sender,\\n            trader,\\n            tokenId0,\\n            tokenId1\\n        );\\n    }\\n\\n    // TO-DO: Handle price range\\n    function createExchange(uint256 tokenId0, uint256 tokenId1)\\n        external\\n        override\\n    {\\n        // if (msg.value.toUSD(s_priceFeed) < 1)\\n        //     revert NFTSwapPool__InsufficientFee();\\n\\n        _createExchange(address(0), tokenId0, tokenId1);\\n    }\\n\\n    function createExchangeFor(\\n        address trader,\\n        uint256 tokenId0,\\n        uint256 tokenId1\\n    ) external override {\\n        if (trader == address(0)) revert NFTSwapPool__ZeroAddress();\\n\\n        // if (msg.value.toUSD(s_priceFeed) < 1)\\n        //     revert NFTSwapPool__InsufficientFee();\\n\\n        _createExchange(trader, tokenId0, tokenId1);\\n    }\\n\\n    function trade(uint256 tokenId0, uint256 tokenId1) external override {\\n        Exchange memory exchange = s_exchange[tokenId0][tokenId1];\\n        (address nft0, address nft1) = (i_nft0, i_nft1);\\n\\n        // if (msg.value.toUSD(s_priceFeed) < 1)\\n        //     revert NFTSwapPool__InsufficientFee();\\n\\n        if (exchange.owner == address(0))\\n            revert NFTSwapPool__NonexistentExchange();\\n        if (msg.sender == exchange.owner) revert NFTSwapPool__InvalidTrader();\\n        if (exchange.trader != address(0) && msg.sender != exchange.trader)\\n            revert NFTSwapPool__InvalidTokenReceiver();\\n\\n        IERC721(nft0).safeTransferFrom(address(this), msg.sender, tokenId0, \\\"\\\");\\n        IERC721(nft1).safeTransferFrom(\\n            msg.sender,\\n            exchange.owner,\\n            tokenId1,\\n            \\\"\\\"\\n        );\\n\\n        if (\\n            _getOwnerOf(nft0, tokenId0) != msg.sender &&\\n            _getOwnerOf(nft1, tokenId1) != exchange.owner\\n        ) revert NFTSwapPool__TransferFromFailed();\\n\\n        // (bool success, ) = payable(s_factory.getFeeReceiver()).call{\\n        //     value: msg.value\\n        // }(\\\"\\\");\\n\\n        // if (!success) revert NFTSwapFactory__FeeTransferFailed();\\n\\n        delete s_exchange[tokenId0][tokenId1];\\n\\n        emit Trade(nft0, nft1, exchange.owner, msg.sender, tokenId0, tokenId1);\\n    }\\n\\n    function updateExchangeOwner(\\n        address newOwner,\\n        uint256 tokenId0,\\n        uint256 tokenId1\\n    ) external override {\\n        if (newOwner == address(0)) revert NFTSwapPool__ZeroAddress();\\n\\n        Exchange memory exchange = s_exchange[tokenId0][tokenId1];\\n\\n        if (msg.sender != exchange.owner) revert NFTSwapPool__NotOwner();\\n\\n        s_exchange[tokenId0][tokenId1] = Exchange(\\n            newOwner,\\n            exchange.trader,\\n            exchange.tokenId0,\\n            exchange.tokenId1\\n        );\\n\\n        emit ExchangeOwnerUpdated(\\n            i_nft0,\\n            i_nft1,\\n            newOwner,\\n            exchange.trader,\\n            exchange.tokenId0,\\n            exchange.tokenId1\\n        );\\n    }\\n\\n    function updateExchangeTrader(\\n        address newTrader,\\n        uint256 tokenId0,\\n        uint256 tokenId1\\n    ) external override {\\n        Exchange memory exchange = s_exchange[tokenId0][tokenId1];\\n\\n        if (msg.sender != exchange.owner) revert NFTSwapPool__NotOwner();\\n        if (newTrader == exchange.owner) revert NFTSwapPool__InvalidTrader();\\n\\n        s_exchange[tokenId0][tokenId1] = Exchange(\\n            exchange.owner,\\n            newTrader,\\n            exchange.tokenId0,\\n            exchange.tokenId1\\n        );\\n\\n        emit ExchangeTraderUpdated(\\n            i_nft0,\\n            i_nft1,\\n            exchange.owner,\\n            newTrader,\\n            exchange.tokenId0,\\n            exchange.tokenId1\\n        );\\n    }\\n\\n    function cancelExchange(\\n        uint256 tokenId0,\\n        uint256 tokenId1,\\n        address to\\n    ) external override {\\n        Exchange memory exchange = s_exchange[tokenId0][tokenId1];\\n        (address nft0, address nft1) = (i_nft0, i_nft1);\\n\\n        if (msg.sender != exchange.owner) revert NFTSwapPool__NotOwner();\\n        if (to == address(0) || to == nft0 || to == nft1)\\n            revert NFTSwapPool__InvalidTo();\\n\\n        IERC721(nft0).safeTransferFrom(address(this), to, tokenId0, \\\"\\\");\\n\\n        delete s_exchange[tokenId0][tokenId1];\\n\\n        emit ExchangeCancelled(\\n            nft0,\\n            nft1,\\n            exchange.owner,\\n            exchange.trader,\\n            to,\\n            tokenId0,\\n            tokenId1\\n        );\\n    }\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xe8602d0b14e86fccd0a502151b0eb5104833a0c32252d2a9261a7a3041ad6dc3\",\"license\":\"MIT\"},\"contracts/NoDelegateCall.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.7;\\n\\n/// @title Prevents delegatecall to a contract\\n/// @notice Base contract that provides a modifier for preventing delegatecall to methods in a child contract\\nabstract contract NoDelegateCall {\\n    /// @dev The original address of this contract\\n    address private immutable original;\\n\\n    constructor() {\\n        // Immutables are computed in the init code of the contract, and then inlined into the deployed bytecode.\\n        // In other words, this variable won't change when it's checked at runtime.\\n        original = address(this);\\n    }\\n\\n    /// @dev Private method is used instead of inlining into modifier because modifiers are copied into each method,\\n    ///     and the use of immutable means the address bytes are copied in every place the modifier is used.\\n    function checkNotDelegateCall() private view {\\n        require(address(this) == original);\\n    }\\n\\n    /// @notice Prevents delegatecall into the modified method\\n    modifier noDelegateCall() {\\n        checkNotDelegateCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xecdcf56e5a6c0c02c9919ac0e4cee869524679795ab669b1491159b1d89fd2cc\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/INFTSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\n/// @title The NFT swap pool factory interface\\n/// @notice Creates swap pools and manages fees\\ninterface INFTSwapFactory {\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first NFT of the pool by address sort order\\n    /// @param token1 The second NFT of the pool by address sort order\\n    /// @param pool The address of the pool created\\n    event PoolCreated(address token0, address token1, address pool);\\n\\n    /// @notice Returns the current fee receiver\\n    /// @dev Can be changed by the current fee setter via setFeeReceiver()\\n    /// @return The current fee receiver\\n    function getFeeReceiver() external view returns (address);\\n\\n    /// @notice Returns the current fee receiver setter\\n    /// @dev Can be changed by the current fee setter via setFeeReceiverSetter()\\n    /// @return The current fee receiver setter\\n    function getFeeReceiverSetter() external view returns (address);\\n\\n    /// @notice Returns all pool addresses\\n    /// @return Array of pool address\\n    function getAllPools() external view returns (address[] memory);\\n\\n    /// @notice Returns pool address\\n    /// @dev token0 and token1 can be passed in any order\\n    /// @param token0 The first NFT of the pool\\n    /// @param token1 The seconf NFT of the pool\\n    /// @return The pool address of the NFT pair\\n    function getPool(address token0, address token1)\\n        external\\n        view\\n        returns (address);\\n\\n    /// @notice Creates the nft swap pool\\n    /// @dev tokenA and tokenB can be passed in any order\\n    /// @param tokenA The first NFT of the pool\\n    /// @param tokenB The second NFT of the pool\\n    /// @return pool The address of the pool created\\n    function createPool(address tokenA, address tokenB)\\n        external\\n        returns (address pool);\\n\\n    /// @notice Updates fee receiver\\n    /// @dev Can only be called by the current fee receiver setter\\n    /// @param feeReceiver The address of the new fee receiver\\n    function setFeeReceiver(address feeReceiver) external;\\n\\n    /// @notice Updates fee receiver setter\\n    /// @dev Can only be called by the current fee receiver setter\\n    /// @param feeReceiverSetter The address of the new fee receiver setter\\n    function setFeeReceiverSetter(address feeReceiverSetter) external;\\n}\\n\",\"keccak256\":\"0x6d5cc16a89854d9fb9668549227dcc96884f6c95dea34f4a6ef8faf4b8dcdd4d\",\"license\":\"MIT\"},\"contracts/interfaces/INFTSwapPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\n/// @title The NFT swap pool interface\\n/// @notice Creates and updates exchanges for trades\\ninterface INFTSwapPool {\\n    /// @notice Emitted when an exchanged is created\\n    /// @param nft0 The address of the first NFT\\n    /// @param nft1 The address of the second NFT\\n    /// @param owner The address of the exchange owner. Owner initialized as the exchange creator\\n    /// @param trader The address of the exchange trader. Trader is the zero address if emitted from createExchange()\\n    /// @param tokenId0 The token id of {nft0} to be exchanged by the owner\\n    /// @param tokenId1 The token id of {nft1} to be received from trades\\n    event ExchangeCreated(\\n        address nft0,\\n        address nft1,\\n        address owner,\\n        address trader,\\n        uint256 tokenId0,\\n        uint256 tokenId1\\n    );\\n\\n    /// @notice Emitted when an exchanged owner is updated\\n    /// @param nft0 The address of the first NFT\\n    /// @param nft1 The address of the second NFT\\n    /// @param newOwner The address of the new exchange owner\\n    /// @param trader The address of the exchange trader\\n    /// @param tokenId0 The token id of {nft0} to be exchanged by the owner\\n    /// @param tokenId1 The token id of {nft1} to be received from trades\\n    event ExchangeOwnerUpdated(\\n        address nft0,\\n        address nft1,\\n        address newOwner,\\n        address trader,\\n        uint256 tokenId0,\\n        uint256 tokenId1\\n    );\\n\\n    /// @notice Emitted when an exchanged trader is updated\\n    /// @param nft0 The address of the first NFT\\n    /// @param nft1 The address of the second NFT\\n    /// @param owner The address of the exchange owner\\n    /// @param newTrader The address of the new exchange trader\\n    /// @param tokenId0 The token id of {nft0} to be exchanged by the owner\\n    /// @param tokenId1 The token id of {nft1} to be received from trades\\n    event ExchangeTraderUpdated(\\n        address nft0,\\n        address nft1,\\n        address owner,\\n        address newTrader,\\n        uint256 tokenId0,\\n        uint256 tokenId1\\n    );\\n\\n    /// @notice Emitted when an exchange is cancelled\\n    /// @param nft0 The address of the first NFT\\n    /// @param nft1 The address of the second NFT\\n    /// @param owner The address of the exchange owner\\n    /// @param trader The address of the exchange trader\\n    /// @param receiver The NFT receiver\\n    /// @param tokenId0 The token id of {nft0} to be exchanged by the owner\\n    /// @param tokenId1 The token id of {nft1} to be received from trades\\n    event ExchangeCancelled(\\n        address nft0,\\n        address nft1,\\n        address owner,\\n        address trader,\\n        address receiver,\\n        uint256 tokenId0,\\n        uint256 tokenId1\\n    );\\n\\n    /// @notice Emitted when a trade occurs\\n    /// @param nft0 The address of the first NFT\\n    /// @param nft1 The address of the second NFT\\n    /// @param owner The address of the exchange owner\\n    /// @param trader The address of the trader\\n    /// @param tokenId0 The token id of {nft0} received\\n    /// @param tokenId1 The token id of {nft1} traded\\n    event Trade(\\n        address nft0,\\n        address nft1,\\n        address owner,\\n        address trader,\\n        uint256 tokenId0,\\n        uint256 tokenId1\\n    );\\n\\n    /// @notice Data model for token id pairs\\n    /// @dev tokenId0 and tokenId1 must be in order\\n    /// @param tokenId0 The token id of {nft0} to be traded by exchange owner\\n    /// @param tokenId1 The token id of {nft1} to be received by exchange owner\\n    struct TokenIdPair {\\n        uint256 tokenId0;\\n        uint256 tokenId1;\\n    }\\n\\n    /// @notice Data model for exchanges\\n    /// @dev tokenId0 and tokenId1 must be in order\\n    /// @param owner Address of exchange owner\\n    /// @param trader Address of trader. Can be set to zero address to allow all traders\\n    /// @param tokenId0 The token id of {nft0} to be traded by exchange owner\\n    /// @param tokenId1 The token id of {nft1} to be received by exchange owner\\n    struct Exchange {\\n        address owner;\\n        address trader;\\n        uint256 tokenId0;\\n        uint256 tokenId1;\\n    }\\n\\n    /// @notice Retreives the NFT pair\\n    /// @return Array of NFT addresses\\n    function getNFTPair() external view returns (address, address);\\n\\n    /// @notice Retrieves all token id pairs\\n    /// @return Array of token id pairs\\n    function getAllPairs() external view returns (TokenIdPair[] memory);\\n\\n    /// @notice Retreives exchange data of token id pairs\\n    /// @dev tokenId0 and tokenId1 must be in order\\n    /// @param tokenId0 Token id of {nft0} to be traded by exchange owner\\n    /// @param tokenId1 Token id of {nft1} requested by the exchange owner\\n    /// @return Exchange data (see Exchange struct for data model)\\n    function getExchange(uint256 tokenId0, uint256 tokenId1)\\n        external\\n        view\\n        returns (Exchange memory);\\n\\n    /// @notice Creates an exchange with tokenId0 for tokenId1 that can be traded by anyone\\n    /// @dev tokenId0 and tokenId1 must be in order\\n    /// @param tokenId0 Token id of {nft0} to be traded by the exchange owner\\n    /// @param tokenId1 Token id of {nft1} requested by the exchange owner\\n    function createExchange(uint256 tokenId0, uint256 tokenId1) external;\\n\\n    /// @notice Creates an exchange with tokenId0 for tokenId1 that can be traded by a specific trader\\n    /// @dev tokenId0 and tokenId1 must be in order\\n    /// @param trader Address of trader of the token requested\\n    /// @param tokenId0 Token id of {nft0} to be traded by the exchange owner\\n    /// @param tokenId1 Token id of {nft1} requested by the exchange owner\\n    function createExchangeFor(\\n        address trader,\\n        uint256 tokenId0,\\n        uint256 tokenId1\\n    ) external;\\n\\n    /// @notice Trades tokenId1 for tokenId0\\n    /// @dev tokenId0 and tokenId1 must be in order\\n    /// @param tokenId0 Token id of {nft0} to be received by trader\\n    /// @param tokenId1 Token id of {nft1} requested by the exchange owner\\n    function trade(uint256 tokenId0, uint256 tokenId1) external;\\n\\n    /// @notice Updates exchange owner\\n    /// @dev tokenId0 and tokenId1 must be in order\\n    /// @param newOwner Address of the new owner\\n    /// @param tokenId0 Token id of {nft0} to be traded by the exchange owner\\n    /// @param tokenId1 Token id of {nft1} requested by the exchange owner\\n    function updateExchangeOwner(\\n        address newOwner,\\n        uint256 tokenId0,\\n        uint256 tokenId1\\n    ) external;\\n\\n    /// @notice Updates exchange trader\\n    /// @dev tokenId0 and tokenId1 must be in order\\n    /// @param newTrader Address of the new trader. Can be set to the zero address to allow all traders to trade\\n    /// @param tokenId0 Token id of {nft0} to be traded by the exchange owner\\n    /// @param tokenId1 Token id of {nft1} requested by the exchange owner\\n    function updateExchangeTrader(\\n        address newTrader,\\n        uint256 tokenId0,\\n        uint256 tokenId1\\n    ) external;\\n\\n    /// @notice Cancels exchange and sends tokenId0 to {to}\\n    /// @dev tokenId0 and tokenId1 must be in order\\n    /// @param tokenId0 Token id of {nft0}\\n    /// @param tokenId1 Token id of {nft1}\\n    /// @param to Address of the receiver of tokenId0\\n    function cancelExchange(\\n        uint256 tokenId0,\\n        uint256 tokenId1,\\n        address to\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdb5719f0f53427b3a18b3887e6bcf89e404a7470faa8d8100d9b89bab4cec97b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b503073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060805160601c612e7a6100e760003960006108d00152612e7a6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063d88ff1f41161005b578063d88ff1f4146100ec578063e34336151461010a578063e8a353921461013a578063efdcd974146101585761007d565b8063055ad16814610082578063531aa03e1461009e578063a4158e01146100ce575b600080fd5b61009c60048036038101906100979190610999565b610174565b005b6100b860048036038101906100b391906109c6565b61023f565b6040516100c59190610a9a565b60405180910390f35b6100d66102e6565b6040516100e39190610a9a565b60405180910390f35b6100f4610310565b6040516101019190610aec565b60405180910390f35b610124600480360381019061011f91906109c6565b61039e565b6040516101319190610a9a565b60405180910390f35b6101426107db565b60405161014f9190610a9a565b60405180910390f35b610172600480360381019061016d9190610999565b610804565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101fb576040517f4d3173ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600280548060200260200160405190810160405280929190818152602001828054801561039457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161034a575b5050505050905090565b60006103a86108ce565b6000806103b58585610928565b91509150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610420576040517fd8f8fe9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610522576040517f9f3c938a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b30828260405160200161053793929190610ab5565b6040516020818303038152906040528051906020012030838360405161055c90610977565b61056893929190610ab5565b8190604051809103906000f5905080158015610588573d6000803e3d6000fd5b5092506002839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146107985782600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f9c5d829b9b23efc461f9aeef91979ec04bb903feb3bee4f26d22114abfc7335b8282856040516107cb93929190610ab5565b60405180910390a1505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461088b576040517f4d3173ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461092657600080fd5b565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610610965578284610968565b83835b80925081935050509250929050565b6122af80610b9683390190565b60008135905061099381610b7e565b92915050565b6000602082840312156109af576109ae610b79565b5b60006109bd84828501610984565b91505092915050565b600080604083850312156109dd576109dc610b79565b5b60006109eb85828601610984565b92505060206109fc85828601610984565b9150509250929050565b6000610a128383610a1e565b60208301905092915050565b610a2781610b47565b82525050565b610a3681610b47565b82525050565b6000610a4782610b1e565b610a518185610b36565b9350610a5c83610b0e565b8060005b83811015610a8d578151610a748882610a06565b9750610a7f83610b29565b925050600181019050610a60565b5085935050505092915050565b6000602082019050610aaf6000830184610a2d565b92915050565b6000606082019050610aca6000830186610a2d565b610ad76020830185610a2d565b610ae46040830184610a2d565b949350505050565b60006020820190508181036000830152610b068184610a3c565b905092915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b6000610b5282610b59565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b610b8781610b47565b8114610b9257600080fd5b5056fe60e06040523480156200001157600080fd5b50604051620022af380380620022af8339818101604052810190620000379190620000fc565b8273ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b81525050505050620001ab565b600081519050620000f68162000191565b92915050565b6000806000606084860312156200011857620001176200018c565b5b60006200012886828701620000e5565b93505060206200013b86828701620000e5565b92505060406200014e86828701620000e5565b9150509250925092565b600062000165826200016c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200019c8162000158565b8114620001a857600080fd5b50565b60805160601c60a05160601c60c05160601c612088620002276000396000505060008181610316015281816108e501528181610de601528181610e5b01528181610f9b015261152f0152600081816102f5015281816108c401528181610dc501528181610e3a01528181610f7a015261150e01526120886000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a351912111610066578063a351912114610143578063d54aa53214610173578063d84fc34f1461018f578063e20be69a146101ae578063f800ece9146101ca5761009e565b8063150b7a02146100a3578063259b5c88146100d357806343770847146100ef57806343bd03121461010b5780636bb508cd14610127575b600080fd5b6100bd60048036038101906100b89190611aca565b6101e8565b6040516100ca9190611f05565b60405180910390f35b6100ed60048036038101906100e89190611be5565b6101fd565b005b61010960048036038101906101049190611b52565b6105bc565b005b61012560048036038101906101209190611b52565b610934565b005b610141600480360381019061013c9190611ba5565b6109ab565b005b61015d60048036038101906101589190611ba5565b6109bb565b60405161016a9190611f20565b60405180910390f35b61018d60048036038101906101889190611b52565b610aba565b005b610197610e35565b6040516101a5929190611da0565b60405180910390f35b6101c860048036038101906101c39190611ba5565b610e82565b005b6101d26113a3565b6040516101df9190611ee3565b60405180910390f35b600063150b7a0260e01b905095945050505050565b60006001600085815260200190815260200160002060008481526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152505090506000807f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000091509150826000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a2576040517f2670305100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061040857508173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b8061043e57508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b15610475576040517f3c5d3d1000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663b88d4fde3086896040518463ffffffff1660e01b81526004016104b293929190611e99565b600060405180830381600087803b1580156104cc57600080fd5b505af11580156104e0573d6000803e3d6000fd5b50505050600160008781526020019081526020016000206000868152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160009055600382016000905550507fd51ba678dd8a8016f24bbe783bc87fe8d20ae0d63501bea37bcc8a0434ea334e828285600001518660200151888b8b6040516105ac9796959493929190611dc9565b60405180910390a1505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610623576040517f5b8d2b2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001600084815260200190815260200160002060008381526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815250509050806000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461077f576040517f2670305100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180608001604052808573ffffffffffffffffffffffffffffffffffffffff168152602001826020015173ffffffffffffffffffffffffffffffffffffffff16815260200182604001518152602001826060015181525060016000858152602001908152602001600020600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301559050507ff532bc9efed4d0c515e792145e7d0cc9bcee920e33cfdc8cd752a1fe6de26c0b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008684602001518560400151866060015160405161092696959493929190611e38565b60405180910390a150505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561099b576040517f5b8d2b2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109a6838383611416565b505050565b6109b760008383611416565b5050565b6109c36119b4565b6001600084815260200190815260200160002060008381526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481525050905092915050565b60006001600084815260200190815260200160002060008381526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815250509050806000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c16576040517f2670305100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610c80576040517fb0d9083200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060800160405280826000015173ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200182604001518152602001826060015181525060016000858152602001908152602001600020600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301559050507fd3ef30e8cc1615032e4f5bdcde924b998bd5f3513d8643eee89b80feb4ef270f7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083600001518785604001518660600151604051610e2796959493929190611e38565b60405180910390a150505050565b6000807f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000915091509091565b60006001600084815260200190815260200160002060008381526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152505090506000807f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000091509150600073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff161415611029576040517f237d79a300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611093576040517fb0d9083200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16836020015173ffffffffffffffffffffffffffffffffffffffff16141580156111045750826020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561113b576040517f6ef7acc400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663b88d4fde3033886040518463ffffffff1660e01b815260040161117893929190611e99565b600060405180830381600087803b15801561119257600080fd5b505af11580156111a6573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663b88d4fde338560000151876040518463ffffffff1660e01b81526004016111eb93929190611e99565b600060405180830381600087803b15801561120557600080fd5b505af1158015611219573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff1661123e8387611921565b73ffffffffffffffffffffffffffffffffffffffff161415801561129b5750826000015173ffffffffffffffffffffffffffffffffffffffff166112828286611921565b73ffffffffffffffffffffffffffffffffffffffff1614155b156112d2576040517f89956be200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008681526020019081526020016000206000858152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160009055600382016000905550507f9ae6c84f444be403f63f3a126829553edc7ac75f1e4911cfff892b274a2149078282856000015133898960405161139496959493929190611e38565b60405180910390a15050505050565b60606000805480602002602001604051908101604052809291908181526020016000905b8282101561140d578382906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050815260200190600101906113c7565b50505050905090565b60006001600084815260200190815260200160002060008381526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152505090506000807f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000091509150600073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff16146115bc576040517f70530da300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16148061162157508173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16145b8061165757508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16145b1561168e576040517fb0d9083200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166116af8286611921565b73ffffffffffffffffffffffffffffffffffffffff1614156116fd576040517f6342823900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663b88d4fde3330886040518463ffffffff1660e01b815260040161173a93929190611e99565b600060405180830381600087803b15801561175457600080fd5b505af1158015611768573d6000803e3d6000fd5b50505050600060405180604001604052808781526020018681525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505060405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581525060016000878152602001908152602001600020600086815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301559050507fb05f50f2871f347da7fab1458a6bf06e0afe6baca6ab65815836b8430ffa07ef82823389898960405161191196959493929190611e38565b60405180910390a1505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b815260040161195c9190611f3b565b60206040518083038186803b15801561197457600080fd5b505afa158015611988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ac9190611a9d565b905092915050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b600081359050611a1781612024565b92915050565b600081519050611a2c81612024565b92915050565b60008083601f840112611a4857611a4761200d565b5b8235905067ffffffffffffffff811115611a6557611a64612008565b5b602083019150836001820283011115611a8157611a80612012565b5b9250929050565b600081359050611a978161203b565b92915050565b600060208284031215611ab357611ab261201c565b5b6000611ac184828501611a1d565b91505092915050565b600080600080600060808688031215611ae657611ae561201c565b5b6000611af488828901611a08565b9550506020611b0588828901611a08565b9450506040611b1688828901611a88565b935050606086013567ffffffffffffffff811115611b3757611b36612017565b5b611b4388828901611a32565b92509250509295509295909350565b600080600060608486031215611b6b57611b6a61201c565b5b6000611b7986828701611a08565b9350506020611b8a86828701611a88565b9250506040611b9b86828701611a88565b9150509250925092565b60008060408385031215611bbc57611bbb61201c565b5b6000611bca85828601611a88565b9250506020611bdb85828601611a88565b9150509250929050565b600080600060608486031215611bfe57611bfd61201c565b5b6000611c0c86828701611a88565b9350506020611c1d86828701611a88565b9250506040611c2e86828701611a08565b9150509250925092565b6000611c448383611d53565b60408301905092915050565b611c5981611fa0565b82525050565b611c6881611fa0565b82525050565b6000611c7982611f66565b611c838185611f7e565b9350611c8e83611f56565b8060005b83811015611cbf578151611ca68882611c38565b9750611cb183611f71565b925050600181019050611c92565b5085935050505092915050565b611cd581611fb2565b82525050565b6000611ce8600083611f8f565b9150611cf382612021565b600082019050919050565b608082016000820151611d146000850182611c50565b506020820151611d276020850182611c50565b506040820151611d3a6040850182611d82565b506060820151611d4d6060850182611d82565b50505050565b604082016000820151611d696000850182611d82565b506020820151611d7c6020850182611d82565b50505050565b611d8b81611ffe565b82525050565b611d9a81611ffe565b82525050565b6000604082019050611db56000830185611c5f565b611dc26020830184611c5f565b9392505050565b600060e082019050611dde600083018a611c5f565b611deb6020830189611c5f565b611df86040830188611c5f565b611e056060830187611c5f565b611e126080830186611c5f565b611e1f60a0830185611d91565b611e2c60c0830184611d91565b98975050505050505050565b600060c082019050611e4d6000830189611c5f565b611e5a6020830188611c5f565b611e676040830187611c5f565b611e746060830186611c5f565b611e816080830185611d91565b611e8e60a0830184611d91565b979650505050505050565b6000608082019050611eae6000830186611c5f565b611ebb6020830185611c5f565b611ec86040830184611d91565b8181036060830152611ed981611cdb565b9050949350505050565b60006020820190508181036000830152611efd8184611c6e565b905092915050565b6000602082019050611f1a6000830184611ccc565b92915050565b6000608082019050611f356000830184611cfe565b92915050565b6000602082019050611f506000830184611d91565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611fab82611fde565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b50565b61202d81611fa0565b811461203857600080fd5b50565b61204481611ffe565b811461204f57600080fd5b5056fea2646970667358221220f924bddef5e75f8b1e6e66cdd29038a8302f057d22661def971f9b5dd7836cbf64736f6c63430008070033a2646970667358221220372c3d3dbc200cfd8220dcaebad38059011c2d217b4d1ebf5e6451a3530940c364736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063d88ff1f41161005b578063d88ff1f4146100ec578063e34336151461010a578063e8a353921461013a578063efdcd974146101585761007d565b8063055ad16814610082578063531aa03e1461009e578063a4158e01146100ce575b600080fd5b61009c60048036038101906100979190610999565b610174565b005b6100b860048036038101906100b391906109c6565b61023f565b6040516100c59190610a9a565b60405180910390f35b6100d66102e6565b6040516100e39190610a9a565b60405180910390f35b6100f4610310565b6040516101019190610aec565b60405180910390f35b610124600480360381019061011f91906109c6565b61039e565b6040516101319190610a9a565b60405180910390f35b6101426107db565b60405161014f9190610a9a565b60405180910390f35b610172600480360381019061016d9190610999565b610804565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101fb576040517f4d3173ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600280548060200260200160405190810160405280929190818152602001828054801561039457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161034a575b5050505050905090565b60006103a86108ce565b6000806103b58585610928565b91509150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610420576040517fd8f8fe9900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610522576040517f9f3c938a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b30828260405160200161053793929190610ab5565b6040516020818303038152906040528051906020012030838360405161055c90610977565b61056893929190610ab5565b8190604051809103906000f5905080158015610588573d6000803e3d6000fd5b5092506002839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146107985782600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f9c5d829b9b23efc461f9aeef91979ec04bb903feb3bee4f26d22114abfc7335b8282856040516107cb93929190610ab5565b60405180910390a1505092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461088b576040517f4d3173ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461092657600080fd5b565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610610965578284610968565b83835b80925081935050509250929050565b6122af80610b9683390190565b60008135905061099381610b7e565b92915050565b6000602082840312156109af576109ae610b79565b5b60006109bd84828501610984565b91505092915050565b600080604083850312156109dd576109dc610b79565b5b60006109eb85828601610984565b92505060206109fc85828601610984565b9150509250929050565b6000610a128383610a1e565b60208301905092915050565b610a2781610b47565b82525050565b610a3681610b47565b82525050565b6000610a4782610b1e565b610a518185610b36565b9350610a5c83610b0e565b8060005b83811015610a8d578151610a748882610a06565b9750610a7f83610b29565b925050600181019050610a60565b5085935050505092915050565b6000602082019050610aaf6000830184610a2d565b92915050565b6000606082019050610aca6000830186610a2d565b610ad76020830185610a2d565b610ae46040830184610a2d565b949350505050565b60006020820190508181036000830152610b068184610a3c565b905092915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b6000610b5282610b59565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b610b8781610b47565b8114610b9257600080fd5b5056fe60e06040523480156200001157600080fd5b50604051620022af380380620022af8339818101604052810190620000379190620000fc565b8273ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b81525050505050620001ab565b600081519050620000f68162000191565b92915050565b6000806000606084860312156200011857620001176200018c565b5b60006200012886828701620000e5565b93505060206200013b86828701620000e5565b92505060406200014e86828701620000e5565b9150509250925092565b600062000165826200016c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200019c8162000158565b8114620001a857600080fd5b50565b60805160601c60a05160601c60c05160601c612088620002276000396000505060008181610316015281816108e501528181610de601528181610e5b01528181610f9b015261152f0152600081816102f5015281816108c401528181610dc501528181610e3a01528181610f7a015261150e01526120886000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a351912111610066578063a351912114610143578063d54aa53214610173578063d84fc34f1461018f578063e20be69a146101ae578063f800ece9146101ca5761009e565b8063150b7a02146100a3578063259b5c88146100d357806343770847146100ef57806343bd03121461010b5780636bb508cd14610127575b600080fd5b6100bd60048036038101906100b89190611aca565b6101e8565b6040516100ca9190611f05565b60405180910390f35b6100ed60048036038101906100e89190611be5565b6101fd565b005b61010960048036038101906101049190611b52565b6105bc565b005b61012560048036038101906101209190611b52565b610934565b005b610141600480360381019061013c9190611ba5565b6109ab565b005b61015d60048036038101906101589190611ba5565b6109bb565b60405161016a9190611f20565b60405180910390f35b61018d60048036038101906101889190611b52565b610aba565b005b610197610e35565b6040516101a5929190611da0565b60405180910390f35b6101c860048036038101906101c39190611ba5565b610e82565b005b6101d26113a3565b6040516101df9190611ee3565b60405180910390f35b600063150b7a0260e01b905095945050505050565b60006001600085815260200190815260200160002060008481526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152505090506000807f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000091509150826000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a2576040517f2670305100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061040857508173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b8061043e57508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b15610475576040517f3c5d3d1000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663b88d4fde3086896040518463ffffffff1660e01b81526004016104b293929190611e99565b600060405180830381600087803b1580156104cc57600080fd5b505af11580156104e0573d6000803e3d6000fd5b50505050600160008781526020019081526020016000206000868152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160009055600382016000905550507fd51ba678dd8a8016f24bbe783bc87fe8d20ae0d63501bea37bcc8a0434ea334e828285600001518660200151888b8b6040516105ac9796959493929190611dc9565b60405180910390a1505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610623576040517f5b8d2b2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001600084815260200190815260200160002060008381526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815250509050806000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461077f576040517f2670305100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180608001604052808573ffffffffffffffffffffffffffffffffffffffff168152602001826020015173ffffffffffffffffffffffffffffffffffffffff16815260200182604001518152602001826060015181525060016000858152602001908152602001600020600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301559050507ff532bc9efed4d0c515e792145e7d0cc9bcee920e33cfdc8cd752a1fe6de26c0b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008684602001518560400151866060015160405161092696959493929190611e38565b60405180910390a150505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561099b576040517f5b8d2b2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6109a6838383611416565b505050565b6109b760008383611416565b5050565b6109c36119b4565b6001600084815260200190815260200160002060008381526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481525050905092915050565b60006001600084815260200190815260200160002060008381526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815250509050806000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c16576040517f2670305100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610c80576040517fb0d9083200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060800160405280826000015173ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200182604001518152602001826060015181525060016000858152602001908152602001600020600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301559050507fd3ef30e8cc1615032e4f5bdcde924b998bd5f3513d8643eee89b80feb4ef270f7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083600001518785604001518660600151604051610e2796959493929190611e38565b60405180910390a150505050565b6000807f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000915091509091565b60006001600084815260200190815260200160002060008381526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152505090506000807f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000091509150600073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff161415611029576040517f237d79a300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826000015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611093576040517fb0d9083200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16836020015173ffffffffffffffffffffffffffffffffffffffff16141580156111045750826020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b1561113b576040517f6ef7acc400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663b88d4fde3033886040518463ffffffff1660e01b815260040161117893929190611e99565b600060405180830381600087803b15801561119257600080fd5b505af11580156111a6573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663b88d4fde338560000151876040518463ffffffff1660e01b81526004016111eb93929190611e99565b600060405180830381600087803b15801561120557600080fd5b505af1158015611219573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff1661123e8387611921565b73ffffffffffffffffffffffffffffffffffffffff161415801561129b5750826000015173ffffffffffffffffffffffffffffffffffffffff166112828286611921565b73ffffffffffffffffffffffffffffffffffffffff1614155b156112d2576040517f89956be200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160008681526020019081526020016000206000858152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160009055600382016000905550507f9ae6c84f444be403f63f3a126829553edc7ac75f1e4911cfff892b274a2149078282856000015133898960405161139496959493929190611e38565b60405180910390a15050505050565b60606000805480602002602001604051908101604052809291908181526020016000905b8282101561140d578382906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050815260200190600101906113c7565b50505050905090565b60006001600084815260200190815260200160002060008381526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152505090506000807f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000091509150600073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff16146115bc576040517f70530da300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16148061162157508173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16145b8061165757508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16145b1561168e576040517fb0d9083200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166116af8286611921565b73ffffffffffffffffffffffffffffffffffffffff1614156116fd576040517f6342823900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663b88d4fde3330886040518463ffffffff1660e01b815260040161173a93929190611e99565b600060405180830381600087803b15801561175457600080fd5b505af1158015611768573d6000803e3d6000fd5b50505050600060405180604001604052808781526020018681525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505060405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581525060016000878152602001908152602001600020600086815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301559050507fb05f50f2871f347da7fab1458a6bf06e0afe6baca6ab65815836b8430ffa07ef82823389898960405161191196959493929190611e38565b60405180910390a1505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b815260040161195c9190611f3b565b60206040518083038186803b15801561197457600080fd5b505afa158015611988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ac9190611a9d565b905092915050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081525090565b600081359050611a1781612024565b92915050565b600081519050611a2c81612024565b92915050565b60008083601f840112611a4857611a4761200d565b5b8235905067ffffffffffffffff811115611a6557611a64612008565b5b602083019150836001820283011115611a8157611a80612012565b5b9250929050565b600081359050611a978161203b565b92915050565b600060208284031215611ab357611ab261201c565b5b6000611ac184828501611a1d565b91505092915050565b600080600080600060808688031215611ae657611ae561201c565b5b6000611af488828901611a08565b9550506020611b0588828901611a08565b9450506040611b1688828901611a88565b935050606086013567ffffffffffffffff811115611b3757611b36612017565b5b611b4388828901611a32565b92509250509295509295909350565b600080600060608486031215611b6b57611b6a61201c565b5b6000611b7986828701611a08565b9350506020611b8a86828701611a88565b9250506040611b9b86828701611a88565b9150509250925092565b60008060408385031215611bbc57611bbb61201c565b5b6000611bca85828601611a88565b9250506020611bdb85828601611a88565b9150509250929050565b600080600060608486031215611bfe57611bfd61201c565b5b6000611c0c86828701611a88565b9350506020611c1d86828701611a88565b9250506040611c2e86828701611a08565b9150509250925092565b6000611c448383611d53565b60408301905092915050565b611c5981611fa0565b82525050565b611c6881611fa0565b82525050565b6000611c7982611f66565b611c838185611f7e565b9350611c8e83611f56565b8060005b83811015611cbf578151611ca68882611c38565b9750611cb183611f71565b925050600181019050611c92565b5085935050505092915050565b611cd581611fb2565b82525050565b6000611ce8600083611f8f565b9150611cf382612021565b600082019050919050565b608082016000820151611d146000850182611c50565b506020820151611d276020850182611c50565b506040820151611d3a6040850182611d82565b506060820151611d4d6060850182611d82565b50505050565b604082016000820151611d696000850182611d82565b506020820151611d7c6020850182611d82565b50505050565b611d8b81611ffe565b82525050565b611d9a81611ffe565b82525050565b6000604082019050611db56000830185611c5f565b611dc26020830184611c5f565b9392505050565b600060e082019050611dde600083018a611c5f565b611deb6020830189611c5f565b611df86040830188611c5f565b611e056060830187611c5f565b611e126080830186611c5f565b611e1f60a0830185611d91565b611e2c60c0830184611d91565b98975050505050505050565b600060c082019050611e4d6000830189611c5f565b611e5a6020830188611c5f565b611e676040830187611c5f565b611e746060830186611c5f565b611e816080830185611d91565b611e8e60a0830184611d91565b979650505050505050565b6000608082019050611eae6000830186611c5f565b611ebb6020830185611c5f565b611ec86040830184611d91565b8181036060830152611ed981611cdb565b9050949350505050565b60006020820190508181036000830152611efd8184611c6e565b905092915050565b6000602082019050611f1a6000830184611ccc565b92915050565b6000608082019050611f356000830184611cfe565b92915050565b6000602082019050611f506000830184611d91565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611fab82611fde565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b50565b61202d81611fa0565b811461203857600080fd5b50565b61204481611ffe565b811461204f57600080fd5b5056fea2646970667358221220f924bddef5e75f8b1e6e66cdd29038a8302f057d22661def971f9b5dd7836cbf64736f6c63430008070033a2646970667358221220372c3d3dbc200cfd8220dcaebad38059011c2d217b4d1ebf5e6451a3530940c364736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getAllPools()": {
        "returns": {
          "_0": "Array of pool address"
        }
      },
      "getFeeReceiver()": {
        "details": "Can be changed by the current fee setter via setFeeReceiver()",
        "returns": {
          "_0": "The current fee receiver"
        }
      },
      "getFeeReceiverSetter()": {
        "details": "Can be changed by the current fee setter via setFeeReceiverSetter()",
        "returns": {
          "_0": "The current fee receiver setter"
        }
      },
      "setFeeReceiver(address)": {
        "details": "Can only be called by the current fee receiver setter",
        "params": {
          "feeReceiver": "The address of the new fee receiver"
        }
      },
      "setFeeReceiverSetter(address)": {
        "details": "Can only be called by the current fee receiver setter",
        "params": {
          "feeReceiverSetter": "The address of the new fee receiver setter"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "PoolCreated(address,address,address)": {
        "notice": "Emitted when a pool is created"
      }
    },
    "kind": "user",
    "methods": {
      "getAllPools()": {
        "notice": "Returns all pool addresses"
      },
      "getFeeReceiver()": {
        "notice": "Returns the current fee receiver"
      },
      "getFeeReceiverSetter()": {
        "notice": "Returns the current fee receiver setter"
      },
      "setFeeReceiver(address)": {
        "notice": "Updates fee receiver"
      },
      "setFeeReceiverSetter(address)": {
        "notice": "Updates fee receiver setter"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1649,
        "contract": "contracts/NFTSwapFactory.sol:NFTSwapFactory",
        "label": "s_feeReceiver",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1651,
        "contract": "contracts/NFTSwapFactory.sol:NFTSwapFactory",
        "label": "s_feeReceiverSetter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1654,
        "contract": "contracts/NFTSwapFactory.sol:NFTSwapFactory",
        "label": "s_allPools",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1660,
        "contract": "contracts/NFTSwapFactory.sol:NFTSwapFactory",
        "label": "s_pool",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      }
    }
  }
}